Aula 3
Professor: Renato Pimentel

-Grafos
    -Revisão de matriz de adjacencias

    -Lista de adjacências
        -Um grafo G(V,A) contendo n vértices e m arestas, i.e. |V|  ≡ n e
        |A|  ≡ m, é representado por um array (vetor) Adj com n listas, uma
        para cada vértice de V.

        -Para cada vértice u ∈ V, a lista Adj[u] contém todos os vértices
        adjacentes a u em G (representados por índices ou ponteiros).
            -Ou seja, para cada vértice u ∈ V, Adj[u] contém todos os vértices v tais
            que a aresta (u,v) pertença a A

        -O custo computacional é O(n+m) - em geral menor que o custo no
        caso de matriz de adjacências
            -Indicada para grafos com n alto, mas poucas arestas

        -Lista de adjacências de um grafo (não direcionado):
            -Cada aresta (u,v) ∈ A é representada duas vezes:
                -uma na lista de adjacências do vértice u, e outra na lista do vértice v
            -A soma dos comprimentos das listas de adjacências dos vértices
            corresponde a 2m ≡ 2|A|

        -Lista de adjacências de um dígrafo:
            -Cada aresta (u,v) ∈ A é representada uma única vez
            -A soma dos comprimentos das listas de adjacências dos vértices
            corresponde a m ≡ |A|

    -Um tipo abstrato de dados (TAD) para grafo
        -Consideramos um tipo abstrato de dados opaco em linguagem C para
        representação por lista de adjacencias

            -Tipo opaco
                -A ED será referenciada mediante um ponteiro para a mesma, ao invés de
                uma variável do tipo Grafo diretamente
                ex:ocorre com o tipo file em C
                -Isto permite ocultar a implementação, permitindo sua alteração sem interferir
                no funcionamento de qualquer código que o utilize - desde que a interface
                seja respeitada

        -Modularização do TAD:
            -grafo.h: a interface em si: definição do tipo opaco; funções disponíveis
            para manipular o grafo (protótipos)
            -grafo.c: o que deve ficar oculto do usuário, além da implementação das
            funções definidas pela interface. Inclui a definição do tipo grafo

        -Tipo grafo: estrutura que contém:
            -eh_ponderado: se as arestas têm peso ou não
            -nro_vert: número de vértices que o grafo - tamanho do conjunto V;
            -grau_max: número máximo de arestas a qual um vértice poderá se
            conectar;
            -arestas: ponteiro onde é alocada a matriz de arestas do grafo;
            -pesos: ponteiro onde é alocada a matriz de pesos das arestas do grafo -
            caso o mesmo seja ponderado;
            -grau: ponteiro onde é alocado um vetor que armazena o número de
            arestas já associadas a um vértice

    -Exemplo de código:
        -grafo.h:
        typedef struct grafo Grafo ;
        Grafo * cria_Grafo ( int nro_vertices , int grau_max , int
            eh_ponderado ) ;
        void libera_Grafo ( Grafo * gr ) ;
        int insereAresta ( Grafo * gr , int orig , int dest , int
            eh_digrafo , float peso ) ;
        int removeAresta ( Grafo * gr , int orig , int dest , int
            eh_digrafo ) ;

