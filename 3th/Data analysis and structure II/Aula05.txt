Aula 5
Professor: Renato Pimentel

-Busca em profundidade
    -O funcionamento da busca em profundidade pode ser assim descrito:
        -Partindo de um vértice inicial, a busca explora o máximo possível cada um
        dos vizinhos de um vértice antes de retroceder (backtracking)
    -Em ingles: depth first search (DFS)
    -Esse tipo de busca se inicia em um vértice e se aprofunda nos vértices
    vizinhos deste até encontrar um dos dois casos:
        -O alvo da busca seja encontrado; ou
        -Um vértice sem vizinhos ainda não visitados; ou

        -backtracking:
            -O grafo é percorrido de maneira sistemática até que a busca falhe, ou se
            encontre um vértice sem vizinhos.
                -Nesse momento, entra em funcionamento o mecanismo de backtracking:
                a busca retorna pelo mesmo caminho percorrido, visando encontrar um
                caminho alternativo.

        -A função que inicializa a busca - buscaProfundidade_Grafo() - recebe
        três parametros:
            -Grafo
            -Vértice inicial da busca
            -Array que marcará a ordem que cada vértice será visitado - 
            correspondendo ao resultado da busca

        -Uma segunda função, buscaProfundidade(), recebe, além dos mesmos
        3 parametros acima, um contador de visitação. Trabalha de forma
        recursiva.
            -A recursão termina quando não houver mais vizinhos a serem visitados

        -Complexidade
            -Considerando um grafo G(V,A), onde |V| é o número de vértices e |A|
            é um número de arestas, a complexidade no pior caso é:
                -Custo de ir para cada vértice: O(|V|);
                -Custo de transitar em cada aresta: O(|A|);
                -Complexidade da busca no pior caso: O(|V| + |A|)

        -Aplicações
            -Encontrar componentes conexas e fortemente conexas;
            -Ordenação topológica de um grafo;
            -Procurar a saída de um labirinto;
            -Verificar se um grafo é completamente conexo:
                -por exemplo, se uma rede de computadores está funcionando
                corretamente ou não;
            -Implementar a ferramenta de preenchimento de cor em editores de
            imagens

-Busca em largura
    -O funcionamento da busca em largura pode ser assim descrito:
        -Partindo de um vértice inicial, a busca explora todos os vizinhos de um
        vértice. Em seguida, para cada vizinho, repete-se esse processo, visitando os
        vértices ainda inexplorados
    -Em ingles: breadth first search (BFS)
    -Esse tipo de busca se inicia em um vértice e então visita todos os seus
    vizinhos antes de se aprofundar na busca. Esse processo continua até 
    que:
        -O alvo de busca seja encontrado; ou
        -Não existam mais vértices a serem visitados.

    -O algoritmo usa o conceito de fila:
        -O grafo é percorrido de maneira sistemática, primeiro marcando como
        "visitados" todos os vizinhos de um vértice e em seguida começa a visitar
        os vizinhos de cada vértice na ordem que eles foram marcados.
        -Para realizar essa tarefa, uma fila é utilizada para administrar a visitação
        dos vértices
            -O primeiro vértice marcado (ou marcado a mais tempo) é o primeiro a
            ser visitado

    -Complexidade
        -Considerando um grafo G(V,A), onde |V| é o número de vértices e |A|
        é o número de arestas, a complexidade no pior caso é:
            -Custo de inserção e remoção em fila: constante;
            -Custo de enfileirar e remover todos os vértices uma vez: O(|V|);
            -Custo de utilizar todas as arestas: O(|A|);
            -Complexidade da busca no pior caso: O(|V|+|A|)

    -Aplicações
        -Encontrar todos os vértices conectados a apenas uma componente
        conexa;
        -Encontrar o menor caminho entre dois vértices;
        -Testar se um grafo é bipartido;
        -Roteamento: encontrar um número mínimo de hops em uma rede;
            -Os hops são os vértices intermediários no caminho correspondete à
            conexão.
        -Encontrar o número mínimo de intermediários entre 2 pessoas.
        