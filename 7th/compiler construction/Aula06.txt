Aula 6
Professor: Luiz Gustavo


-Lexema
    -Erros léxicos
        -Estratégias de recuperação podem ser usadas:
            -Envolve transformações na entrada restante:
                -Remover um caractere
                -Inserir um caractere que falta
                -Substituir um caractere por outros
                -Transpor dois caracteres adjacentes

        -"Modo pânico": remove caracteres até reconhecer o lexema

        -Estratégia mais simples aplica uma unica transformação

        -Estrategia mais geral busca encontrar o menor número de
        transformações necessárias para obter um lexema válido
            -estratégia muito dispendiosa
            -não garante efetividade dos resultados

-Varredura (Scanner)
    -Consiste na leitura da entrada (código fonte) para a
    identificação dos lexemas (casamento de um padrão)
        -Consome caractere a caractere da esquerda para direita

    -Identificação correta de um lexema pode exigir a
    leitura de 1 ou + caracteres a frente (lookahead)
        ex: na linguagem Fortran, as palavras-chave não são
        reservadas e os espaços são desconsiderados

    -Técnicas especializadas de buffering são empregadas
    para reduzir o custo da operação
        -2 buffers para tratar lookaheads grandes com segurança
        -Uso de "sentinelas" para evitar verificação de fim do buffer

-Pares de buffer
    -Adota 2 buffers de entrada de mesmo tamanho
        -Relacionado com o tamanho do bloco do disco (ex:4096 bytes)

    -Comando de leitura do sistema carrega todo o
    buffer ao invés de um único caractere
        -Buffers são carregados alternadamente
        -Caractere especial EOF define fim do arquivo

    -Abordagem adota 2 ponteiros:
        -ini: marca o inicio do lexema atual
        -prox: indica o proximo caractere a ser lido

    -Podemos esgotar o espaço em buffer?
        -Lexemas são geralmente pequenos
            -1 ou 2 caracteres de lookahead são suficientes
        -Problema na leitura de cadeias longas(> buffer)
            -Linguagens que não tratam palavras-chave como reservadas
            -Existência de lexemas maiores que o buffer (ex:literais)

-Sentinelas
    -Envolve incluir um caractere extra (sentinela) no fim de
    cada buffer
        -Geralmente é usado o caractere especial EOF
        -Exige uma posição a mais na estrutura de armazenamento

    -Visa reduzir a quantidade de testes a cada caractere lido
        -Original: fim do buffer e qual caractere lido
        -Sentinela: qual caractere lido

    -Posição do EOF indica o cenário a ser tratado:
        -Final do buffer: EOF na ultima posição
        -Final do arquivo de entrada: EOF nas demais posições

    -Tratamento do EOF:
        -SE prox está no fim do 1º buffer ENTÃO
            -carrega o 2º buffer
            -prox = inicio do 2º buffer

        -SENÃO SE prox está no fim do 2º buffer ENTÃO
            -carrega o 1º buffer
            -prox = início do 1º buffer

        -SENÃO // Fim do arquivo
            -fim da análise léxica

-Expressões Regulares (ER)
    -Notação formal usada para especificar a estrutura
    (padrões) dos tokens
        -Possibilita um analisador léxico sem erros (estrutura precisa)
        ex: string definida como uma cadeia de caracteres entre aspas
            -não são todos os caracteres que são permitidos (ex: '\n')
        ex: números reais em notação de ponto fixo (ex: 3.0 e 0.12)
            -3. e .12 são aceitos em Fortran, mas não em Pascal

    -Descreve as linguagens a partir de 3 operações sobre
    símbolos de algum alfabeto:
        -União: L U M = {s|s ∈ L ou s ∈ M}
        -Concatenação: LM = {st|s ∈ L ou t ∈ M}
        -Fecho Kleene: L*= U^i=0..∞ L

-Processo Indutivo
    -ER podem ser definidas a partir de expressões menores
        -cada expressão r denota um linguagem L(r)

    -Regras que forma a base das expressões regulares:
        -ε é uma expressão regular e L(ε) é {ε}
        -se a é um simbolo de Σ, então a é uma expressão regular e L(a) = {a}

    -Regras que formam a parte indutiva das expressões regulares:
        -(r)|(s) é uma expressão regular denotando L(r) U L(s)
        -(r)(s) é uma expressão regular denotando L(r)L(s)
        -(r)* é uma expressão regular denotando L(r)*
        -se r é uma expressão regular, (r) também é e denota a mesma linguagem

-Precedência dos operadores
    -Precedência:
        -Fecho (*)          //maior
        -Concatenação
        -União(|)           //menor

    -Todos com associatividade à esquerda