Aula 4
Professor: Daniel Furtado

-CSS
    -Outros tipos de Seletores
        -Além do seletor de elemento apresentado anteriormente, há varias outras
        formas de indicar quais partes da página devem ser afetadas pela regra CSS

        -Algumas dessas formas são:
            -Seletor de ID
            -Seletor de filho
            -Seletor de descente
            -Seletor de irmão adjacente
            -Seletor de irmão geral
            -Seletor de atributo
            -Seletor de classe

        -Seletor de ID (#idDoElemento)
            O seletor de ID pode ser utilizado quando se deseja aplicar estilos a apenas
            um elemento em particular. Utiliza-se # seguido do id do elemento

            ex:
            <style>
            
                #par1 {
                    text-align: center;
                    color: red;
                }

            </style>

            <body>

                <p id="par1">Parágrafo afetado</p>
                
                <p>Parágrafo não afetado</p>

            </body>

            //Afeta apenas o elemento que tem o id indicado no seletor.
            Vale lembrar que os id's devem ser únicos na página.

        -Seletor de Filho (x > y)
            -O seletor de filho tem a sintaxe x>y e afeta apenas os
            elementos y que são filhos de elementos x

        -Seletor de Descendente (x y)
            -Afeta os elementos y que estão dentro de elementos x, mesmo
            que tenha outros elementos aninhados entre eles

        -Seletor de Irmão Adjacente (x + y)
            -Afeta todo elemento y que aparece imediatamente depois de x

        -Seletor de Irmão Geral (x ~ y)
            -Afeta todos os elementos y que são irmãos de x e aparecem depois de x

        -Seletor de atributo x[atributo]
            -Seleciona elementos de acordo com alguma condição
            envolvendo seus atributos

        -Seletor de Classe
            -O seletor de classe é um dos tipos de seletores mais comuns
            -Ideal para situações onde é necessário aplicar os estilos mais de uma vez
            -Primeiramente, deve-se criar uma classe de estilos CSS com os estilos
            desejados. Utiliza-se o caractere "ponto" seguido do nome da classe:
            
                .minhaClasseCSS(
                    /* declarações CSS */
                )
            -Posteriormente, aplica-se os estilos da classe no elemento desejado
            utilizando o atributo class do elemento:

                <elemento class="minhaClasseCSS">

            -É possível criar uma classe que poderá ser aplicada a apenas
            um determinado tipo de elemento

            -Classes específicas de elementos nos dá a possibilidade de definir mais de uma
            classe utilizando o mesmo nome.
            
            -É possível utilizar outros seletores em conjunto com classes

        -Referenciando multiplas classes
            -É possível aplicar os estilos de múltiplas classes em um elemento. Basta
            utilizar um espaço para separa os nomes das classes no atributo class

        -Seletores com Pseudo-Classes
            -Uma pseudo-classe permite alterar o estilo de um elemento caso ele esteja
            em um estado particular
            -Por exemplo, é possível alterar o estilo dos links que já foram visitados ou o
            estilo dos campos de formulário com conteúdo inválido.
            -Sintaxe: seletor:pseudo-classe

            -Pseudo-Classes Comumente Utilizadas com Links
                :link
                    -Define o estilo inicial do link
                    ex: a:link{color:blue;}

                :visited
                    -Define os estilos de link já visitados
                    ex: a:visited {color:gray;}

                :hover
                    -Define o estilo de exibição do elemento quando o
                    ponteiro do mouse está sobre ele
                    ex: a:hover {text-decoration:none;}

                :active
                    -Define o estilo de exibição do elemento quando
                    ativado (botão do mouse pressionado sobre ele)
                    ex: a:active, p:active {color:gray;}

                :valid
                    -Define o estilo de campos de formulário quando
                    estão no estado válido (conteúdo apropriado)
                    ex: input:valid {color:green;}
                
                :invalid
                    -Define o estilo de campos quando estão no estado
                    inválido (conteúdo no formato incorreto)
                    ex: input: invalid {color:red}

                :checked
                    -Define o estilo de campos de tipo radio, checkbox 
                    ou option quando selecionado
                    ex: radio:checked {color:gray;}

                :focus
                    -Define o estilo do campo quando estiver em foco
                    (campo em edição)
                    ex: input: focus {background-color:gray;}

            -Função de Pseudo-Classe :has()
                -A função de pseudo-classe :has() permite slecionar elementos que tenham
                outros elementos associados conforme seletor passado para a função has()

                -Por exemplo, é possível selecionar um elemento pai com base em uma 
                condição envolvendo os descendentes

                -Outra possibilidade é selecionar um elemento qualquer com base em uma
                condição envolvendo elementos irmãos
                
                ex: 
                div:has( img){
                    background-color: gray;
                }
                -Seleciona os elementos div que têm um descendente img, alterando a cor de
                fundo desses div's para cinza

            -Pseudo-elementos
                -Permite selecionar uma parte específica de um elemento
                -Sintaxe geral: elemento :: valor
                ex:
                p::first-line{
                    text-transform: uppercase;
                }

                -Pseudo-Elementos ::after e ::before
                    -O pseudo-elemento ::after representa um espaço para conteúdo localizado depois
                    do conteúdo normal do elemento (mas ainda dentro do elemento)
                    ex:
                    p::after {
                        content: 'exemplo after';
                    }
                    -Insere o texto 'exemplo after' como um pseudo-elemento depois do conteúdo
                    do parágrafo

                    -O pseudo elemento ::before representa um espaço antes do conteúdo
                    ex:
                    p::before {
                        content: 'exemplo before';
                    }
                    -Insere o texto 'exemplo before' como um pseudo-elemento antes do conteúdo
                    do parágrafo

                    -Normalmente eles são utilizados em conjunto com a propriedade content para
                    inserir conteúdo nesses espaços com CSS

                -Observações sobre pseudo-elementos
                    -A notação com 4 pontos (::) foi introduzida em atualizações da CSS
                    
                    -:: é a forma atualmente recomendada para pseudo-elementos, pois
                    diferencia pseudo-elementos de pseudo-classes, uma vez que há diferença
                    semântica significativa entre eles

    -Ajustes textuais
        -Tipos de fontes:
            -Fonte Sans-serif
                -Sem prolongamentos
                ex: Arial, Verdana

            -Fonte Serif
                -Com prolongamentos
                ex: Times New Roman

            -Fonte Monospace
                -Letras com mesma largura de exibição
                ex: Courier New, Consolas

        -Propriedades de ajuste de fonte
            -font-family
                -define a fonte em si
                ex: font-family:Verdana, Arial, sans-serif

            -font-size
                -define o tamanho da fonte
                ex: font-size: 20px

            -font-style
                -define o estilo da fonte
                ex: font-style: italic 

            -font-weight
                -define a espessura da letra
                ex: font-weight: bold

            -font-variant
                -define variantes da fonte
                ex: font-variant: small-caps

            -font-stretch
                -estica ou comprime a fonte
                ex: font-stretch: expanded

            -line-height
                -define o espaçamento entre linhas
                ex: line-height: 1.5

            -text-align
                -alinhamento horizontal do texto dentro da região de conteúdo
                ex:
                h1 {text-align: center}
                p {text-align: justify}
                p {text-align: right}

            -vertical-align
                -alinhamento vertical do texto
                ex:
                vertical-align: top
                vertical-align: middle

            -text-decoration
                -decoração adicional
                ex:
                text-decoration: none
                text-decoration: underline

            -text-indent
                -recuo de 1ª linha
                ex:
                text-indent: 30px

            -text-transform
                -controle de maiúsculas e minúsculas
                ex:
                text-transform: uppercase
                text-transform: lowercase
                text-transform: capitalize

            -color
                -define a cor do texto
                ex: color:green

    -Unidades de tamanho da CSS
        -Unidades de tamanho absoluto
            -A unidade px (pixels) é a unidade de tamanho absoluto mais Comum
            -Tamanhos absolutos não dependem de tamanhos definidos no elemento pai
            -Além disso, ao definir um tamanho utilizando px, o tamanho não será afetado por
            eventual mudança no tamanho de fonte realizada pelo usuário nas configurações
            do navegador (portanto, os tamanhos definidos pelo usuário serão deprezados)
            -Devem ser utilizados com cautela

        -Unidades de tamanho relativo
            -Podem depender de outros tamanhos e configurações como aquelas definidas
            pelo usuário no navegador, do tamanho definido no elemento pai, do tamanho da
            viewport (região visivel da página no navegador) etc.

        -Unidades de tamanho relativo mais comuns
            -em - relativo ao tamanho da fonte corrente (herdado do elemento pai)
                -2em = dobro da fonte corrente
                ex:
                .medio {
                    font-size: 16px;
                }
                
                .grande {
                font-size: 2em;
                }

            -rem - relativo ao tamanho da fonte do elemento raiz (<html>)
                -2rem = dobro do tamanho da fonte do elemento raiz
                ex:
                html {
                font-size: 14px;
                }

                .medio {
                font-size: 16px;
                }
                
                .grande {
                font-size: 2rem;
                }

        -Outras unidades de tamanho relativo
            -% - em geral, relativo ao elemento pai
                -widht:50% - define a largura em 50% da largura do container

            -vh - relativo à altura da viewport (viewport height)
                -30vh corresponde a 30% da altura da viewport

            -vw - relativo à largura da viewport (viewport width)
                -100vw corresponde a 100% da largura da viewport

            -ch - relativo à largura de um caractere utilizando a fonte do elemento
                -widht: 10ch - define a largura para comportar até 10 caracteres
                